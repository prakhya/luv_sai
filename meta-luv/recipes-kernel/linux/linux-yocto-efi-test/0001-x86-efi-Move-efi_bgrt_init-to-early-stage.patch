From bec318125b4b9597bdff217c96b915ab95fcbeaf Mon Sep 17 00:00:00 2001
From: Sai Praneeth <sai.praneeth.prakhya@intel.com>
Date: Thu, 9 Mar 2017 15:15:50 -0800
Subject: [PATCH 1/9] x86/efi: Move efi_bgrt_init() to early stage

BGRT initialization copies image that the table describes and presently
we are calling this function (efi_bgrt_init()) after
efi_enter_virtual_mode(). The region that contains BGRT image is an
EFI_BOOT_SERVICES_DATA region. When CONFIG_EFI_WARN_ON_ILLEGAL_ACCESSES
is enabled, kernel doesn't save any EFI regions except EFI_RUNTIME
regions and hence we loose BGRT image. To overcome this let's call
efi_bgrt_init() before efi_enter_virtual_mode(). This also makes BGRT
image available for kexec, because efi_bgrt_init() updates the
corresponding memory region attribute to EFI_RUNTIME.

Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
Cc: Lee, Chun-Yi <jlee@suse.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Fenghua Yu <fenghua.yu@intel.com>
Cc: Ravi Shankar <ravi.v.shankar@intel.com>
Cc: Matt Fleming <matt@codeblueprint.co.uk>
Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
CC: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/kernel/setup.c          | 1 +
 arch/x86/platform/efi/efi-bgrt.c | 6 +++---
 init/main.c                      | 1 -
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index 4cfba947d774..481d19cf8a90 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -1126,6 +1126,7 @@ void __init setup_arch(char **cmdline_p)
 		efi_fake_memmap();
 		efi_find_mirror();
 		efi_esrt_init();
+		efi_late_init();
 
 		/*
 		 * The EFI specification says that boot service code won't be
diff --git a/arch/x86/platform/efi/efi-bgrt.c b/arch/x86/platform/efi/efi-bgrt.c
index 6aad870e8962..d88a866d38e1 100644
--- a/arch/x86/platform/efi/efi-bgrt.c
+++ b/arch/x86/platform/efi/efi-bgrt.c
@@ -67,14 +67,14 @@ void __init efi_bgrt_init(void)
 		return;
 	}
 
-	image = memremap(bgrt_tab->image_address, sizeof(bmp_header), MEMREMAP_WB);
+	image = early_memremap(bgrt_tab->image_address, sizeof(bmp_header));
 	if (!image) {
 		pr_notice("Ignoring BGRT: failed to map image header memory\n");
 		return;
 	}
 
 	memcpy(&bmp_header, image, sizeof(bmp_header));
-	memunmap(image);
+	early_memunmap(image, sizeof(bmp_header));
 	if (bmp_header.id != 0x4d42) {
 		pr_notice("Ignoring BGRT: Incorrect BMP magic number 0x%x (expected 0x4d42)\n",
 			bmp_header.id);
@@ -82,7 +82,7 @@ void __init efi_bgrt_init(void)
 	}
 	bgrt_image_size = bmp_header.size;
 
-	bgrt_image = memremap(bgrt_tab->image_address, bmp_header.size, MEMREMAP_WB);
+	bgrt_image = early_memremap(bgrt_tab->image_address, bmp_header.size);
 	if (!bgrt_image) {
 		pr_notice("Ignoring BGRT: failed to map image memory\n");
 		bgrt_image = NULL;
diff --git a/init/main.c b/init/main.c
index b0c9d6facef9..9648d707eea5 100644
--- a/init/main.c
+++ b/init/main.c
@@ -663,7 +663,6 @@ asmlinkage __visible void __init start_kernel(void)
 	sfi_init_late();
 
 	if (efi_enabled(EFI_RUNTIME_SERVICES)) {
-		efi_late_init();
 		efi_free_boot_services();
 	}
 
-- 
2.1.4

