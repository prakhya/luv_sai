From ce1832f6675b4e6aff31769ff450dddaec1eef98 Mon Sep 17 00:00:00 2001
From: Sai Praneeth <sai.praneeth.prakhya@intel.com>
Date: Fri, 10 Mar 2017 16:07:45 -0800
Subject: [PATCH 5/9] x86/efi: Copy support functions to install/uninstall
 original_memory_map

These functions are already implemented at drivers/firmware/efi/memmap.c
We cannot call these functions in page fault handler because they have
__init modifier and we don't want that. Removing __init modifier for
these functions require changes till __early_memremap which is too
invasive and hence not at all acceptable, so instead just have modified
versions of the same functions without the need for __init.

Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
Cc: Lee, Chun-Yi <jlee@suse.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Fenghua Yu <fenghua.yu@intel.com>
Cc: Ravi Shankar <ravi.v.shankar@intel.com>
Cc: Matt Fleming <matt@codeblueprint.co.uk>
Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Cc: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/platform/efi/quirks.c | 72 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 72 insertions(+)

diff --git a/arch/x86/platform/efi/quirks.c b/arch/x86/platform/efi/quirks.c
index 5279be03f7ad..cbdaab68a0b3 100644
--- a/arch/x86/platform/efi/quirks.c
+++ b/arch/x86/platform/efi/quirks.c
@@ -538,4 +538,76 @@ void __init efi_save_orig_memmap(void)
 	orig_new_phys = new_phys;
 	orig_num_entries = num_entries;
 }
+
+/**
+ * __efi_memmap_init - Map the passed EFI memory map
+ * @data: EFI memory map data
+ * @late: Use early or late mapping function? (unused)
+ *
+ * Returns zero on success, a negative error code on failure.
+ */
+static int __efi_memmap_init(struct efi_memory_map_data *data, bool late)
+{
+	struct efi_memory_map map;
+	phys_addr_t phys_map;
+
+	if (efi_enabled(EFI_PARAVIRT))
+		return 0;
+
+	phys_map = data->phys_map;
+
+	map.map = memremap(phys_map, data->size, MEMREMAP_WB);
+
+	if (!map.map) {
+		pr_err("Could not map the memory map!\n");
+		return -ENOMEM;
+	}
+
+	map.phys_map = data->phys_map;
+	map.nr_map = data->size / data->desc_size;
+	map.map_end = map.map + data->size;
+
+	map.desc_version = data->desc_version;
+	map.desc_size = data->desc_size;
+	map.late = late;
+
+	set_bit(EFI_MEMMAP, &efi.flags);
+
+	efi.memmap = map;
+
+	return 0;
+}
+
+/**
+ * efi_unmap_memmap - Unmap the existing EFI memory map
+ */
+static void efi_unmap_memmap(void)
+{
+	memunmap(efi.memmap.map);
+
+	efi.memmap.map = NULL;
+	clear_bit(EFI_MEMMAP, &efi.flags);
+}
+
+/**
+ * efi_install_memmap - Install a new EFI memory map in efi.memmap
+ * @addr: Physical address of the memory map
+ * @nr_map: Number of entries in the memory map
+ *
+ * Returns zero on success, a negative error code on failure.
+ */
+static int efi_install_memmap(phys_addr_t addr, unsigned int nr_map)
+{
+	struct efi_memory_map_data data;
+
+	efi_unmap_memmap();
+
+	data.phys_map = addr;
+	data.size = efi.memmap.desc_size * nr_map;
+	data.desc_version = efi.memmap.desc_version;
+	data.desc_size = efi.memmap.desc_size;
+
+	return __efi_memmap_init(&data, efi.memmap.late);
+}
+
 #endif /* CONFIG_EFI_WARN_ON_ILLEGAL_ACCESSES */
-- 
2.1.4

